<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
<article>
<articleinfo>
<title>Link-sys WPC11 Mini-HOWTO</title>

    <author>
      <firstname>Gerardo</firstname>
      <surname>Arnaez</surname>
      <affiliation>
	<address><email>dude@mung.net</email></address>
      </affiliation>
      <affiliation>
	<orgname>
	  <ulink url="http://www.raintree.org"><trademark>Raintree
	      I.T.</trademark></ulink>
	</orgname>
      </affiliation>
      <affiliation>
	<orgdiv>
	  <emphasis>Department of Advanced Skunk Works</emphasis></orgdiv>
      </affiliation>
    </author>

<revhistory>
      <revision>
	<revnumber>2.2.4</revnumber>
	<date>2004-06-03</date>
	<authorinitials>gea</authorinitials>
	

	<revremark>Cleaning up this HOW-TO. I have since moved on and
	offer this document for adoption or at least consider it
	obsolete at this time.  Also my (ex) girl friend never did
	write the documentation to how she got the card working with
	Suse. Sorry.
</revremark>
      </revision>
      <revision>
	<revnumber>2.2.3</revnumber>
	<date>2003-07-31</date>
	<authorinitials>gea</authorinitials>
	<revremark>WPC11 CARD DRIVERS HAVE CHANGED. Thanks to Bill
	Atkins for providing information and solution</revremark>
      </revision>
      <revision>
	<revnumber>2.2.2</revnumber>
	<date>2003-07-05</date>
	<authorinitials>gea</authorinitials>
	<revremark>Most likely last update for this manual.  The new
	2.5 (to be 2.6) kernel appears to work fine with respect to
	wireless cards and hence you can build wireless support
	directly into the kernel and not have to go 'outside' it like this.</revremark>
      </revision>
      <revision>
	<revnumber>2.2</revnumber>
	<date>2003-04-07</date>
	<authorinitials>gea</authorinitials>
	<revremark>Made a few typo corrections. Publish it on Freshmeat</revremark>
      </revision>

      <revision>
	<revnumber>2.0.2</revnumber>
	<date>2003-02-24</date>
	<authorinitials>gea</authorinitials>
	<revremark>Thanks to Justin Stockton for helping me eliminate a confusing bit of reading.</revremark>
      </revision>
      <revision>
	<revnumber>2.0</revnumber>
	<date>2003-01-15</date>
	<authorinitials>gea</authorinitials>
	<revremark>I have decided to generalize this document to other distributions then just Debian.  The redhat section is due to the generous contribution of Tony Perrie of Involution (.DOT.) com. I also recently got a fast connection again and was able to update kernel and patches info. I also tried out the new wlan-ng module</revremark>
      </revision>

      <revision>
	<revnumber>1.2</revnumber>
	<date>2003-01-11</date>
	<authorinitials>gea</authorinitials>
	<revremark>Made clear where to get most up-to-date documents</revremark>
      </revision>
        <revision>
                <revnumber>1.1.4</revnumber>
                <date>2002-12-22</date>
                <authorinitials>gea</authorinitials>
	<revremark>I forgot what i did here</revremark>
        </revision>

	<revision>
		<revnumber>1.1.3</revnumber>
		<date>2002-06-09</date>
		<authorinitials>gea</authorinitials>
		<revremark>Made clear what version on linux-wlan I actually used.</revremark>
	</revision>	



	<revision>
		<revnumber>1.1.2</revnumber>
		<date>2002-05-26</date>
		<authorinitials>gea</authorinitials>
		<revremark>In part 2 of the HOWTO, the last item says make-kpkg --revision-custom.1.0 kernel_image when later on you used the correct one make-kpkg --revision=custom.1.0 kernel_image .  Where there is an equal sign before the word custom and not a dash.  This has been corrected. thanks to Raj Prakash, raj@rajeshprakash.com</revremark>
	</revision>
	<revision>
		<revnumber>1.1.1</revnumber>
		<date>2002-04-27</date>
		<authorinitials>gea</authorinitials>
		<revremark>some more grammar improvements, and highlighting to make things clearer</revremark>
	</revision>

	<revision>
		<revnumber>1.1</revnumber>
		<date>2002-04-13</date>
		<authorinitials>gea</authorinitials>
		<revremark>Correct grammar, made things a little more clearer, made software requirements more explicit.</revremark>
	</revision>
        <revision>
		<revnumber>1.0</revnumber>
		<date>2002-03-24</date>
		<authorinitials>gea</authorinitials>
		<revremark>Written because I spent enough figuring this out that I wanted to store "how I did it" somewhere I wouldn't lose it and figure you all might like it too.</revremark>
	</revision>
	
      <revision>
	<revnumber>1.1.4</revnumber>
	<date>2002-8-10</date>
	<authorinitials>gea</authorinitials>
	<revremark>I attempted to follow my own instruction on re-installing on the same laptop and found my how-to a little lacking. Have made things a bit clearer on what I am using. Also made a table to two</revremark>
      </revision>
</revhistory>

<abstract>
	<indexterm>
		<primary>Abstract</primary>
	</indexterm>
	<para>This is a Cookbook on how to set up a Wireless Link-Sys WPC11 card using a Link-SYS Wireless Access Point/DSL/Switch on a Debian system. Other systems are addressed.
	</para>
</abstract>

</articleinfo>

  <sect1>
    <title>Preliminaries</title>
    <sect2>
      <title>Where to Get Most Recent Updates</title>
    <para>The most recent updates to this mini-doc are at the  <ulink url="http://www.mung.net">mung[dot]net</ulink>.  If you mirror this document, please try to keep it the most recent one.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>WARNING ABOUT WPC11 VERSION 4</title>
    <caution>
      <para><emphasis>The NEW WPC11 CARDS HAVE  Realtek 8180 CHIPSET
      INSTEAD OF THE RTL8180.</emphasis> Thanks to Juan Natera for
      clarification</para>
    </caution>
    <caution>
	<para>It had come to my attention that the new version,
    Version 4 are not compatible with my old instructions. I include a set of
    instruction provided by bill atkins</para>
    </caution>
    <para>Until I can clean this up, I include Bill atkins email for
    sake of urgency</para>
    <para>
Quote from Bill Atkins</para>
    <para>
OK.
    </para>
    <para>
First of all, make sure you have a V4 card.  Type <screen>cardctl ident</screen> as root.
 If one of the entries shown is a <screen>RealTek RTL8180L</screen> or something similar,
      then you have a version 4 card.</para>
      <caution>
	<para>
If not, then you can probably just follow
the rest of the instructions in the HOWTO.</para>
      </caution>

    <para>
Now you need to get drivers for the card.  Go to RealTek's download
      AND do a search fo 8180 from the downloads section</para>
    <para>or you can download the driver that works with Bill's email
      at
      <screen>ftp://152.104.125.40/cn/wlan/rtl8180l/rtl8180_24x_suse82.zip</screen></para>

    <para>
and pick up the drivers for SuSE (you don't need to be running SuSE for
the drivers to work - I used them with Gentoo.  However, the other divers
don't seem to work at all).
    </para>
    <para>
Unpack the incoming tarball.  As of this writing, there is a minor bug in
the driver code that must be repaired in order to make the card work.
</para>
    <para>Open up r8180_type.h.</para>
<caution>
	<para>
On line 128, you'll see a line with two slashes
before the text.  Remove these slashes.  Now you're ready to build.</para>
    </caution>

    <para>
At the shell prompt, type make.  The drivers will build themselves.  If
there are any problems making the drivers, open up the Makefile and check
the kernel version settings on the first few lines.
    </para>
    <para>
Now open up the wlanup file.</para>
    <para>
Uncomment line 5 (remove the #) and change
the SSID to the SSID of your network.</para>
    <para>
Uncomment line 8 and set the
ssid2scan to your network's SSID. Uncomment line 9 and set the networktype
to infra (unless you really are using adhoc). Save your changes.</para>
    <para>
Now eject the card <screen>cardctl eject</screen> and plug it in again.</para>
    <para>From the
directory where you unpacked the drivers, type <screen>insmod -f rtl8180_24x.o</screen></para>
    <para>
You will get a warning  - ignore it.
    </para>
    <para>
Now run the wlanup script found in the driver package.  Your card should
now appear when you type ifconfig.  You should configure your IP address
at this point.  If you use DHCP, just type "dhcpd wlan0". Try pinging
google.com.  You should get replies back.  If so, your card is working!
    </para>
    <para>
Now copy rtl8180_24x.o to /lib/modules/YOURKERNELNAME, where
YORUKERNELNAME is the name of the directory in /lib/modules.</para>
    <para>Then copy
the wlanup and wlandown scripts to /sbin.
    </para>
  </sect1>
<sect1>

<TITLE>Link-sys WPC11 install on Debian</TITLE>

<sect2>
<title>Why Debian and why just this card?</title>
<para>I have been trying for months to get wireless working on Debian and after reading far and wide and getting help from irc.debian.org, I realized that there really is no Cookbook in getting wireless set up. Thus having just done it I want to commit to 'paper' so that you all can use it and I can refer to it knowing it is safe somewhere. :)
</para>
      <sect3>
	<title>Redhat installation</title>
	<para>I have gotten a few requests for help on getting the card installed on other distributions. I will try to address the RedHat Installation in this mini-how-to</para>
      </sect3>
      <sect3>
	<title>Suse Installation</title>
	<para>My girlfriend got the WPC-11 card working on Suse. I am waiting for her to give me her how to</para>
      </sect3>
</sect2>

    <sect2>
      <title>Required Hardware</title>
<para>By required I mean, here is what I used to get this to work, and may serve as guide to anyone who wants to know what really works.</para>
<para>
	<emphasis>BEFW11S4- EtherFast? Wireless AP + Cable/DSL Router w/4-Port Switch.</emphasis>  I really really like this WAP (Wireless Access Point). It is OS independent (read, linux friendly) and is configured using a browser so no need to touch Microsoft software at all, even to configure it.  And if you don't know what a switch is, let me tell ya, they rock. Essentially they allow the NIC to communicate in both directions at the same time. I highly recommend one.
</para>

<para>Link-sys WPC11. I have a version 3.0 and don't recommend any thing less than a version 2.5  Cost about 80 dollars</para>
      <sect3><title>What is the linksys card based on?</title>
	<para>It is an Inersil Prism 3-based card</para>
      </sect3>
    </sect2>


<sect2><title>Software Requirements</title>
      <sect3>
	<title>Debian Software Requirements</title>
      <para>
	<table frame=all>
	  <title>Debian Software Requirements</title>
	  <tgroup cols=4 align=left colsep=1 rowsep=1>
	    <thead>
	      <row>
		<entry>Software</entry>
		<entry>Version</entry>
		<entry>URL link</entry>
		<entry>notes</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<!-- one of (ENTRYTBL ENTRY) -->

		<entry>Debian Distribution</entry>

		<entry>Stable ("Woody")</entry>

		<entry><ulink url="http://www.debian.org">www.debian.org</ulink></entry>

		  <entry>linux-2.4.20.tar, patched with patch-2.4.21-pre3.bz<footnote>
		      <para>This new patched kernel worked amazingly well</para>
		    </footnote>
 </entry>
	      </row>

	      <row>
		<!-- one of (ENTRYTBL ENTRY) -->
		
		<entry>Absolute Systems</entry>

		<entry>0.1.16-pre8</entry>

		<entry><ulink url="http://www.linux-wlan.com/linux-wlan/">Absolute systems</ulink></entry>

		<entry>Make sure you download the <emphasis>11Mbps</emphasis> version. Works for 0.1.16-pre8</entry>
	      </row>

	      <row>
		<!-- one of (ENTRYTBL ENTRY) -->
		<entry>pcmcia-source</entry>
		
		<entry>Stable</entry>
		
		<entry><screen>apt-get install pcmcia-source</screen></entry>
		
		<entry><---type this</entry>
	      </row>

	      <row>
		<!-- one of (ENTRYTBL ENTRY) -->
		<entry>pcmcia-cs</entry>
		
		<entry>stable</entry>
		<entry><screen>apt-get install pcmcia-cs</screen></entry>
		<entry><---type this</entry>
	      </row>

	      <row>
		<!-- one of (ENTRYTBL ENTRY) -->
		<entry>wireless-tools</entry>
		<entry>Stable</entry>
		<entry><screen>apt-get install wireless-tools</screen></entry>

		<entry><--type this</entry>
	      </row>

	      <row>
		<!-- one of (ENTRYTBL ENTRY) -->

		<entry>pump</entry>
		<entry>stable</entry>
		<entry><screen>apt-get install pump</screen></entry>

		<entry>Useful to see if card works</entry>
	      </row>

	      <row>
		<!-- one of (ENTRYTBL ENTRY) -->

		<entry>kernel-package</entry>

		<entry>stable</entry>
		<entry><screen>apt-get install kernel-package</screen></entry>

		<entry>Good way to build kernel and the one I describe.</entry>
	      </row>
	      <row>
		<!-- one of (ENTRYTBL ENTRY) -->

		<entry>Kernel</entry>
		<entry>2.4.20, patched with patch-2.4.21-pre3.bz2 </entry>

		<entry><ulink url="http://www.kernel.org">www.kernel.org</ulink></entry>
		  <entry>You must know how to build and patch a kernel to do this. Its not hard and I will show you<footnote>
		      <para>Note to patch a kernel you type <screen>bzip2 -dc patch-2.4.21-pre3.bz2 | patch -p0</screen></para>
		    </footnote>
</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
      </para>
      </sect3>
      <sect3>
	<title>RedHat Software Requirements</title>
      <para>
	<table frame=all>
	  <title>RedHat Software Requirements</title>
	   <tgroup cols=4 align=left colsep=1 rowsep=1>
	    <thead>
	      <row>
		<entry>Software</entry>
		<entry>Version</entry>
		<entry>URL link</entry>
		<entry>notes</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Redhat 8.0</entry>
		<entry>stock kernel</entry>
		<entry>*</entry>
		<entry><ulink url="http://www.redhat.com">RedHat</ulink></entry>
	      </row>
	      </tbody>
	    </tgroup>
	  </table></para>
      </sect3>
    </sect2>
    <sect2>
      <title>Notes on additional helpful software</title>
   

<para>You will also need some way to setup you IP address on your wireless card, I recommend either <screen>apt-get install DHCP-client</screen> to install the DHCP-client that will automatically configure your IP address, if you have a DHCP server. The WAP-11 hardware does provide DHCP server capabilities</para>

<para>Or at least have the <emphasis>pump</emphasis> application, which also will query a DHCP server and get you an IP address from the DHCP server. Note I tend to use <emphasis>pump</emphasis> when I am trying out new hardware to see if there is a connection, since to test a particular device, say <emphasis>eth0</emphasis> I would type <screen>pump -i eth0</screen> where the option <emphasis>-i</emphasis> tells <emphasis>pump</emphasis> what device to try to get an IP address. In this particular case, when I could not get Debian to automatically set up my wireless card, which was device <emphasis>wlan0</emphasis>, I would type <screen>pump -i wlan0</screen> and <emphasis>pump</emphasis> would try to set up the device. Anyway, the point is, that it is a good trouble shooting command, and you should know about it, and I talk more about it later.</para>


<para>I also recommend you use the "kernel-package" package when you want to build your new kernel, which I will get to. This tool is very good and you should be using it anyway when you are building new kernel for the Debian distribution. You can install it by typing <screen>apt-get install kernel-package</screen> Also, be sure to read the documentation it comes with, in case I don't do a good job explaining how to use it, later in this document
</para>
    </sect2>
  </sect1>

<sect1><title>Debian Kernel Configuration</title>

<sect2><title>What TO enable</title>
<para>In order to use the wireless tools, like <emphasis>iwconfig</emphasis>, which will allow you tell how good your connection is, you need to enable support for <emphasis>Wireless LAN (Non-Ham Radio)</emphasis>.</para>
<para>In these examples, I use <screen>make menuconfig</screen> to configure my kernel.</para>

<para>You can do this by:</para>
<literallayout>
Go to:

	Network Device support -->

then Select:

 	Wireless LAN (non-hamradio)  --->
</literallayout>
<para>
Then Choose the options,
so that it looks like below, or something
as close to this.
Note I am using 'make menuconfig'
to configure my kernel
</para>

<literallayout>
  [*] Wireless LAN (non-hamradio)
  < >   STRIP (Metricom starmode radio IP)
  < >   AT T WaveLAN & DEC RoamAbout DS support
  < >   Aironet Arlan 655 & IC2200 DS support
  < >   Aironet 4500/4800 series adapters
  < >   Cisco/Aironet 34X/35X/4500/4800 ISA and PCI cards
  <*>   Hermes chipset 802.11b support (Orinoco/Prism2/Symbol)
  < >     Hermes in PLX9052 based PCI adaptor support
  <*>     Prism 2.5 PCI 802.11b adaptor support 
</literallayout>

</sect2>

<sect2><title>What <emphasis>NOT</emphasis> to Enable</title>
<para>One of the main stumbling blocks was to realize that the <emphasis>pcmcia support in the kernel is not as good as the pcmcia-source support</emphasis> that one gets when you build it from pcmcia-source.
</para>

<para>I use either <screen>make xconfig</screen> or <screen>make menuconfig</screen> to configure my kernel, so when you configure your kernel, be sure to not have pcmcia support enabled under <screen>General setup</screen>
</para>

<para>Nor do you want to select any particular pcmcia card under <screen>Network device support</screen>. I repeat you do not want this under the kernel and you will be building it when you download pcmcia-source.</para>  <caution><para>Be sure to download all the necessary components before you take pcmcia support out of the kernel, otherwise, if you were using a pcmcia card for net access, you will not  be able to connect to the Internet using the new kernel, until you have built both pcmcia support and module drivers for the wireless card</para></caution>
</sect2>
</sect1>

<sect1><title>Building PCMCIA-SOURCE</title>
<para>Download pcmcia-source, by typing <screen>apt-get install pcmcia-source</screen> This will download the source into <screen>/usr/src</screen> as <screen>pcmcia-cs.tar.gz</screen></para>

<para>You now need to gunzip the file by <screen>gunzip pcmcia-cs.tar.gz</screen> and then untar the file by <screen>tar xvf pcmcia-cs.tar</screen></para>
<para>You should see pcmcia-source unpacked into the directory  <screen>/usr/src/modules/pcmcia-cs</screen></para>
</sect1>

<sect1><title>Using make-kpkg to build the new kernel and pcmcia-source modules</title>
  <para>Steps to build the kernel</para>
  <itemizedlist>
    <listitem>
<para>Be sure the pcmcia-source is under /usr/src/modules.</para>
    </listitem>
    <listitem>
<para>Go ahead and configure your kernel and be sure that pcmcia support IS NOT compiled in as an option in the kernel.</para>
    </listitem>
    <listitem>
<para>To build the kernel and pcmcia-source, be sure you are under the <screen>/usr/src/linux</screen> or have a symbolic link from /usr/src/linux pointing to whatever kernel source you have set up.</para>
    </listitem>
    <listitem>
      <para>Type <screen>make-kpkg clean</screen> to clean</para>
    </listitem>
    <listitem>
      <para>
Then type <screen>make-kpkg --revision=custom.1.0 kernel_image modules_image</screen></para>
    </listitem>
  </itemizedlist>

<para>The <emphasis>kernel_image</emphasis> option will build the kernel while the <emphasis>modules_image</emphasis> option will build all modules located under <screen>/usr/src/modules/</screen>. So be sure that you do indeed want to rebuild any other modules that are located in source when you are ready to build your new kernel.</para>

<para>After some chugging, go up one level to <screen>/usr/src</screen> and you should see two new Debian packages that should look something like this:
<literallayout>
kernel-image-2.4.19-pre4_custom.1.0_i386.deb
pcmcia-modules-2.4.19-pre4_3.1.31-7+custom.1.0_i386.deb
</literallayout>
</para>

<para>You first want to install the kernel image so you would type <screen>dpkg -i kernel-image-etc....</screen></para>

<para>Now install the modules by typing <screen>dpkg -i pcmcia-modules.etc...</screen></para>

<caution><para>There are a couple of assumptions that make-kpkg makes about your lilo.conf file. One is that you have not radically changed it.  Make-kpgk will make make symbolics links from '/boot' where the actual kernel resides to 'vmlinuz' which is under '/'. In other words, under '/', you will see <emphasis>vmlinuz</emphasis> and <emphasis>vmlinuz.old</emphasis> which are symbolic links to the real kernel images under <emphasis>/boot/</emphasis>.  Anyway if you have any questions ask me.</para></caution>

</sect1>


<sect1><title>Wlan Drivers for You Link-Sys Card</title>
<para>You have downloaded the 11 Wlan project.  Go a head and read the instruction, and put it under modules.  Follow the instructions when you <screen>make config</screen> The one key is to make sure you specify the pcmcia-source as under <screen>/usr/src/modules/pcmcia-cs</screen> and not choose the default it gives you.</para>

<para>Go ahead and <screen>make all</screen> and <screen>make install</screen></para>

    <para>I suggest you read the documentation that comes with it, but essentially, <emphasis>if you have a WAP that is connected to your DSL or cable modem then you have a <emphasis>infrastructure set up.</emphasis></emphasis>  I found that it was best to edit the <screen>networks.opt</screen> under the <screen>/etc/pcmcia</screen> directory.</para>

<para>To make things easier edit the option
<literallayout># Use DHCP (via /sbin/dhcpcd, /sbin/dhclient, or /sbin/pump)? [y/n]
DHCP="y"</literallayout> to what I have, i.e., set it to yes.
</para>

<para>The documentation talks about setting ESSID but when you edit the <screen>wlan-ng.opts</screen> you will only see
<literallayout>
#=======INFRASTRUCTURE STATION START===================
# SSID is all we have for now
AuthType="opensystem"           # opensystem | sharedkey (requires WEP)
DesiredSSID="howardnet"
</literallayout>
</para>

<para>From what I can gather,DesiredSSID means ESSID and it works when the WAP and link-sys pcmcia card share the same name.</para>

<para>At this point, you should reboot and should have a working link-sys card that gets its address via DHCP.</para>

</sect1>

<sect1><title>Checking things in case they don't work</title>
<para>1. Be sure to type <screen>ifconfig</screen></para>
<para>You should something like this</para>
<literallayout>
lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)

wlan0     Link encap:Ethernet  HWaddr 00:06:25:A8:AE:64
          inet addr:192.168.1.104  Bcast:192.168.1.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:35197 errors:0 dropped:0 overruns:0 frame:0
          TX packets:57676 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:100
          RX bytes:43386657 (41.3 MiB)  TX bytes:2670811 (2.5 MiB)
          Interrupt:3 Base address:0x100
</literallayout>
<para>The keys point here are that <emphasis>inet addr:</emphasis>has a real IP address, and that <emphasis>Bcast</emphasis> and <emphasis>Netmask</emphasis> are set up such that they are on the same "wave-length" as your Wireless Access Point.</para>

<para>2. If you don't, you might have had the same problem i did which was that there was no easy script to initiate the wlan0 device setup. That is to say, if the card was recognized but you still did not get a connection and say that ifconfig showed wlan0 present but with no IP address. In other words, you might see something like this:</para>

<para><literallayout>
text:/home/dude# ifconfig

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:14 errors:0 dropped:0 overruns:0 frame:0
          TX packets:14 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:700 (700.0 b)  TX bytes:700 (700.0 b)

wlan0     Link encap:Ethernet  HWaddr 00:06:25:A8:AE:64
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:1 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:100
          RX bytes:46 (46.0 b)  TX bytes:0 (0.0 b)
          Interrupt:3 Base address:0x100

</literallayout></para>

<para>As you can see, the interface device, the Wireless pcmcia card, is noted, but there is no <emphasis>inet addr</emphasis>. The pcmcia software recognized the card, but it has not successfully connected with the Wireless Access Point.</para>

<para>I used the command,<emphasis>pump</emphasis> to send a simple DHCP request to the DHCP server for the device in question. I used<screen>pump -i wlan0</screen> which essentially runs a simple DHCP request to set up that card, wlan0, in this case.</para>

<para>You can get the <emphasis>pump</emphasis> by <screen>apt-get install pump</screen></para>

<para>While I needed to use <screen>pump -i wlan0</screen> on my laptop, I did not need this when I set up the link-sys wireless WPC11 card on my girlfriend's laptop. She has a Link-Sys WPC11 version 2.5 pcmcia card.</para>
</sect1>

<sect1><title>Wireless tools</title>
<para>While it is not necessary to include this in your kernel configuration, you can enable Wireless tool extensions by going (i assume you use xconfig or menuconfig) to <screen>Network device support</screen> and then go to <screen>Wireless LAN (non-hamradio)</screen> and enable support for the <screen>Hermes chipset 802.11b support (Orinoco/Prism2/Symbol)</screen>.  This will let you use the Wireless Tools like <screen>iwconfig</screen>, <screen>iwspy</screen> and such.</para>

<para>The one thing I found this good for is that by repeated typing iwconfig, you can see your Link Quality.  Its quite good</para>
</sect1>



  <sect1>
    <title>RedHat Installation</title>
    <para>This is a summary of what Mr.Tony Perrie of <ulink url="http://involution.com">involution.com</ulink> fame has wriiten. I include here with his permission. I encourage you to visit his site because he has a great "how-to" on <ulink url="http://involution.com/iptables_demo/">IPtables</ulink>.</para>

    <sect2>
      <title>Drivers</title>
      <para>The stock kernel driver to use with the WPC11 is the orinoco_cs. Make sure that it's loaded.</para>

	<screen>modprobe orinoco_cs</screen>

      <para>If you get some error messages after executing modprobe, insure that the wavelan_cs and wvlan_cs drivers are unloaded. By doing</para>
      <screen>lsmod | egrep lan</screen>
      <para>If they are loaded do the following:</para>
      <screen>rmmod wavelan_cs</screen>
      <para>and</para>
      <screen>rmmod wvlan_cs</screen>
    </sect2>
    <sect2>
      <title>Hermes.conf Hack</title>
      <para>The hack is putting the following in</para>
      <para> <screen>/etc/pcmcia/hermes.conf.</screen>
	<literallayout>
card "Instant Wireless Network PC Card"
manfid 0x0274,0x1613
bind "orinoco_cs"
	</literallayout>
      </para>
    </sect2>
    <sect2>
      <title>Redhat PCMCIA Services</title>
      <para>You'll then need to restart pcmcia service.</para>
      <screen>service pcmcia restart</screen>
    </sect2>
    <sect2>
      <title>Redhat System Tools</title>
      <para>Go to the Redhat System Tools and hit Configure. Then add a wireless device in Managed mode if you have an access point.</para>
      <para> Setup dhcp, and the WEP key. The channel autoconfigures to 6 in managed mode.</para>
    </sect2>
    <sect2>
      <title>Restart the network.</title>
      <screen>service network restart</screen>
    </sect2>
  </sect1>


<sect1>
<title>Wireless Access Point</title>
<para>Perhaps its it missing the forest for the trees, but I did not spend any discussion setting up the actual Wireless Access Point. The reason is that the documentation that comes with the WAP is well written. The only thing I haven't spoken about is enabling Wireless Encryption Protocol in the WAP (Wireless Access Point) which I really don't suggest as I don't think WEP has been properly set up in the drivers for the Pcmcia Wireless Cards. However, let me know if you have any problems and I will be glad to help.
</para>
</sect1>

<sect1><title>Request for comments</title>
<para>I will be glad to help anyone out and if things are a bit confusing in this quite mini how to, please tell me how I can fix it to make it better.</para>

<para>Thanks!</para></sect1>

</Article>
