<!doctype article public "-//OASIS//DTD DocBook V3.1//EN"
 [
<!entity header system "header.sgml">
]>
<ARTICLE ID="INDEX"><ARTHEADER><TITLE>  NFS-Root-Client Mini-HOWTO </TITLE>
<PUBDATE>v4.1, 02 Feb, 1999</PUBDATE>
<AUTHOR><FIRSTNAME>Ofer</FIRSTNAME>
<SURNAME>Maor</SURNAME></AUTHOR>
<ABSTRACT><PARA>The purpose of this Mini-Howto is to explain how to create client root directories on a server that is using NFS Root mounted clients.</PARA></ABSTRACT>
<REVHISTORY><REVISION><REVNUMBER>4.1</REVNUMBER>
<DATE>Feb 02, 1999</DATE>
<AUTHORINITIALS>mo</AUTHORINITIALS>
<REVREMARK></REVREMARK></REVISION></REVHISTORY></ARTHEADER>
<SECT1 ID="copyright"><TITLE>Copyright</TITLE>
<PARA>(c) 1996 Ofer Maor (<EMAIL>oferm@hcs.co.il</EMAIL>)</PARA>
<PARA>Unless otherwise stated, Linux HOWTO documents are copyrighted by their respective authors. Linux HOWTO documents may be reproduced and distributed in whole or in part, in any medium physical or electronic, as long as this copyright notice is retained on all copies. Commercial redistribution is allowed and encouraged; however, the author would like to be notified of any such distributions.</PARA>
<PARA>All translations, derivative works, or aggregate works incorporating any Linux HOWTO documents must be covered under this copyright notice. That is, you may not produce a derivative work from a HOWTO and impose additional restrictions on its distribution. Exceptions to these rules may be granted under certain conditions; please contact the Linux HOWTO coordinator at the address given below.</PARA>
<PARA>In short, we wish to promote dissemination of this information through as many channels as possible. However, we do wish to retain copyright on the HOWTO documents, and would like to be notified of any plans to redistribute the HOWTOs.</PARA>
<PARA>If you have questions, please contact Ofer Maor (<EMAIL>oferm@hcs.co.il</EMAIL>), the author of this mini-HOWTO, or Greg Hankins, the Linux HOWTO coordinator, at <EMAIL>gregh@sunsite.unc.edu</EMAIL> via email, or at +1 404 853 9989.</PARA>
<PARA>If you have anything to add to this Mini-Howto, please mail the author (Ofer Maor, <EMAIL>oferm@hcs.co.il</EMAIL>), with the information. Any new relevant information would be appreciated.</PARA>
<SECT2><TITLE>Thanks</TITLE>
<PARA>I would like to express my thanks to the author of the NFS-Root Howto, Andreas Kostyrca (<EMAIL>andreas@medman.ag.or.at</EMAIL>). His Mini-Howto helped me with the first steps in creating a NFS Root Mounted client. My Mini-Howto does not, in any way, try to replace his work, but to enhance it using my experiences in this process.</PARA>
<PARA>I would also like to thank Mark Kushinsky (<EMAIL>mark026@ibm.net</EMAIL>) for polishing the english and spelling of this Howto, thus making it much more readable. </PARA></SECT2></SECT1>
<SECT1 ID="preface"><TITLE>Preface</TITLE>
<PARA>This Mini-Howto was written in order to help people who want to use NFS Root mounting to create their client's directories. Please note that there are many ways to accomplish this, depending on your needs and intent. If the clients are individual, and each client has its own users and administrator, it will be necessary to make significant parts of the client dirs not shared with other clients. On the other hand, if the client is intended for multiple users, and are all administrated by the same person (for instance, a computerclass), make as many files as possible shareable in order to make administration more manageable. This Howto will focus on the second issue.</PARA>
<SECT2 ID="overview"><TITLE>General Overview</TITLE>
<PARA>When building a client's root directory, and trying to limit ourselves to the minimum client size, we mainly focus on which files we can share, or mount from the server. In this Howto I will recommend the configuration of a client based on my experience. But beforewe begin please note: </PARA>
<ITEMIZEDLIST><LISTITEM><PARA>This Mini-Howto does not explain how to do the actual NFS Root mounting. Refer to the NFS-Root Mini-Howto if you need more information about that issue.</PARA></LISTITEM>
<LISTITEM><PARA>I based most of my client's configuration on mounts and symbolic links. A lot of those symbolic links can be replaced by hardlinks. One should choose according to his personal preference. Putting a hardlink over a mount and a symbolic link has its advantages, but might cause confusion. A file will not be erased until all its hardlinks are removed. Thus, In order to prevent a case in which you upgrade a certain file, and the hardlinks still refer to the older version, you will have to be very careful and keep track of every link you put.</PARA></LISTITEM>
<LISTITEM><PARA>While mounting the information from the server, two concepts can be used. The first (most common) concept, is to mount the whole server root directory under a local directory, and then just change the path or link the relevant directories there. I personally dislike mounting root partitions of a server on clients. Thus, this Howto suggests a way to mount the relevant directories of the server to the relevant places on the system.</PARA></LISTITEM>
<LISTITEM><PARA>This Howto is based on my experience building client directories on a Slackware 3.1 based distribution. Things may be different (especially on the <FILENAME>rc.*</FILENAME> files), for other users, however the concepts should still remain the same.</PARA></LISTITEM></ITEMIZEDLIST></SECT2></SECT1>
<SECT1 ID="clientroot"><TITLE>Creating the client's root directory</TITLE>
<SECT2><TITLE>Creating the directory tree</TITLE>
<PARA>First of all, you need to create the directory structure itself. I created all the clients under <FILENAME>/clients/hostname</FILENAME> and I will use it for my examples listed below. This, however, can be changed to anything else. The first stage, then, is to create the relevant directories in the root directory. You should create the following directories: </PARA>
<PARA><FILENAME MOREINFO="NONE">bin</FILENAME>
, 
<FILENAME>dev</FILENAME>
, 
<FILENAME>etc</FILENAME>
, 
<FILENAME>home</FILENAME>
, 
<FILENAME>lib</FILENAME>
, 
<FILENAME>mnt</FILENAME>
, 
<FILENAME>proc</FILENAME>
, 
<FILENAME>sbin</FILENAME>
, 
<FILENAME>server</FILENAME>
, 
<FILENAME>tmp</FILENAME>
, 
<FILENAME>usr</FILENAME>
, 
<FILENAME>var</FILENAME></PARA>
<PARA> and any other directories you might want to have on your system.</PARA>
<PARA>The <FILENAME>local</FILENAME>, <FILENAME>proc</FILENAME>, and <FILENAME>dev</FILENAME> directories will be used separately on each machine while the rest of the directories will be either partly or completely shared with the rest of the clients.</PARA></SECT2>
<SECT2><TITLE>Creating the minimal file system needed for boot</TITLE>
<SECT3><TITLE>Creating the <FILENAME>dev</FILENAME> dir.</TITLE>
<PARA>Although the <FILENAME>dev</FILENAME> dir can be shared, it is better to create a separate one for each client. You can create your client's <FILENAME>dev</FILENAME> directory with the appropriate MAKEDEV scripts, however in most cases it is simpler just to copy it from the server:</PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">bash# cp -a /dev /clients/hostname</PROGRAMLISTING>
<PARA>You should keep in mind that <FILENAME MOREINFO="NONE">/dev/mouse</FILENAME>, <FILENAME MOREINFO="NONE">/dev/cdrom</FILENAME> and <FILENAME MOREINFO="NONE">/dev/modem</FILENAME> are symbolic links to actually devices, and therefore you should be sure that they are linked correctly to fit the client's hardware.</PARA></SECT3>
<SECT3><TITLE>Copying the necessary binaries.</TITLE>
<PARA>Although we mount everything from the server, there is a minimum that we need to copy to each client. First of all, we need "init", our system will not be able to run anything before init'ing (as the author found out in the hard way ;-). So first, you should copy <FILENAME>/sbin/init</FILENAME> to your client's <FILENAME>sbin</FILENAME> dir and then so that <FILENAME MOREINFO="NONE">rc.S</FILENAME> will run, you should copy <FILENAME MOREINFO="NONE">/bin/sh</FILENAME> to the client's <FILENAME MOREINFO="NONE">bin</FILENAME> directory. Also, in order to mount everything you need to copy <FILENAME MOREINFO="NONE">/sbin/mount</FILENAME> to the client's <FILENAME MOREINFO="NONE">sbin</FILENAME> directory. This is the minimum, assuming the first line in your <FILENAME MOREINFO="NONE">rc.S</FILENAME> is <COMMAND MOREINFO="NONE">mount -av</COMMAND>. However, I recommend copying a few more files: <FILENAME MOREINFO="NONE">update</FILENAME>, <FILENAME MOREINFO="NONE">ls</FILENAME>, <FILENAME MOREINFO="NONE">rm</FILENAME>, <FILENAME MOREINFO="NONE">cp</FILENAME> and <FILENAME MOREINFO="NONE">umount</FILENAME>, so that you will have the basic tools in case the client has problems mounting. If you choose to leave your swap on line before mount, you should also copy the <FILENAME MOREINFO="NONE">swapon</FILENAME> binary. </PARA>
<PARA>Since most of these binaries are by default dynamically linked, you will also need to copy a fair part of <FILENAME MOREINFO="NONE">/lib</FILENAME>: </PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">bash# cp -a /lib/ld* /lib/libc.* /lib/libcursses.* /client/hostname/lib</PROGRAMLISTING>
<PARA>Hardlinking the binaries themselves, instead of copying them, should be considered. Please read my comments on this in <XREF LINKEND="overview"> of this Howto.</PARA>
<PARA>Please notice, all of the information above assumes that the kernel has been given the network parameters while booting up. If you plan to use rarp or bootp, you will probably need the relevant binaries for these as well.</PARA>
<PARA>Generally, you will need the minimum of files that will enable you to configure the network and run <FILENAME>rc.S</FILENAME> up to the point where it mounts the rest of the file system. Make sure you looked into your <FILENAME MOREINFO="NONE">/etc/init</FILENAME> and <FILENAME MOREINFO="NONE">rc.S</FILENAME> files, making sure there are no "surprises" in any of them, which will require other files to be accessed, before the first mount will take place. If you do, however, find such files, you can either copy them as well, or remove the relevant parts from your <FILENAME>init</FILENAME> and your <FILENAME>rc.S</FILENAME> files. </PARA></SECT3>
<SECT3><TITLE>The <FILENAME MOREINFO="NONE">var</FILENAME> directory</TITLE>
<PARA>The var directory, in most cases, should be separate for each client. However, a lot of the data can be shared. Create under the server directory a directory called <FILENAME>var</FILENAME>. We will mount the server's <FILENAME>var</FILENAME> directory there. To create the local <FILENAME>var</FILENAME> directory, simply type:</PARA><PROGRAMLISTING FORMAT="LINESPECIFIC">bash# cp -a /var /clients/hostname/</PROGRAMLISTING>
<PARA>Now, you have a choice as to what you want to separate, and what you want to share. Any directory/file that you want to share, simply remove it from the client's <FILENAME>var</FILENAME> dir, and symlink it to the <FILENAME MOREINFO="NONE">/server/var/</FILENAME> directory. However please note that you should either symlink it to <FILENAME MOREINFO="NONE">/server/var</FILENAME> or to <FILENAME MOREINFO="NONE">../server/var</FILENAME> but NOT to <FILENAME MOREINFO="NONE">/clients/hostname/server/var</FILENAME> as this will not work when the root changes. </PARA>
<PARA>Generally, I would recommend separating <FILENAME MOREINFO="NONE">/var/run</FILENAME>, <FILENAME>/var/lock</FILENAME>, <FILENAME>/var/spool</FILENAME>, and <FILENAME MOREINFO="NONE">/var/log</FILENAME>. </PARA></SECT3>
<SECT3><TITLE>The rest of the directories</TITLE>
<ITEMIZEDLIST><LISTITEM><PARA><FILENAME MOREINFO="NONE">etc</FILENAME> is explained thoroughly in the next section. </PARA></LISTITEM>
<LISTITEM><PARA><FILENAME MOREINFO="NONE">mnt</FILENAME> and <FILENAME MOREINFO="NONE">proc</FILENAME> are for local purposes. </PARA></LISTITEM>
<LISTITEM><PARA><FILENAME MOREINFO="NONE">usr</FILENAME> and <FILENAME MOREINFO="NONE">home</FILENAME> are merely mount points. </PARA></LISTITEM>
<LISTITEM><PARA><FILENAME MOREINFO="NONE">tmp</FILENAME> is up to you. You can create a different <FILENAME MOREINFO="NONE">tmp</FILENAME> directory for each client, or create some <FILENAME MOREINFO="NONE">/clients/tmp</FILENAME> directories, and mount it for each client under <FILENAME MOREINFO="NONE">/tmp</FILENAME>. I would recommend that you provide each client with a separate <FILENAME MOREINFO="NONE">tmp</FILENAME> directory. </PARA></LISTITEM></ITEMIZEDLIST>
<PARA></PARA></SECT3></SECT2>
<SECT2><TITLE>Building the <FILENAME>etc</FILENAME> directory and configuring the clients</TITLE>
<PARA>Please Note - <NOTE><PARA>this section refers to building the etc directory which is mostly shared among the clients. If your diskless clients have separate system administrators, it's best to set up for each client a separate etc directory.</PARA></NOTE></PARA>
<SECT3><TITLE>Building a clients wide <FILENAME>etc</FILENAME> directory </TITLE>
<PARA></PARA></SECT3>
<SECT3><TITLE>Creating a client's <FILENAME>etc</FILENAME> directory</TITLE>
<PARA>Although we separate the <FILENAME>etc</FILENAME> directories of the clients, we still want to share a large portion of the files there. Generally, I think sharing the etc files with the server's <FILENAME MOREINFO="NONE">/etc</FILENAME> is a bad idea, and therefore I recommend creating a <FILENAME MOREINFO="NONE">/clients/etc</FILENAME> directory, which will hold the information needed for the clients. To start with, simply copy the contents of the server's <FILENAME>etc</FILENAME> to the <FILENAME MOREINFO="NONE">/clients/etc</FILENAME> directory.</PARA>
<PARA>You should add to this directory all of the non-machine-specific configuration files, for instance <FILENAME>motd</FILENAME>, <FILENAME>issue</FILENAME>, etc. and not the clientspecific ones.(i.e. <FILENAME>inittab</FILENAME> or <FILENAME>fstab</FILENAME>)</PARA>
<PARA>The most important changes will be in your <FILENAME>rc.d</FILENAME> directory. First, you should change <FILENAME>rc.inet1</FILENAME> to be suitable for your local setup. I pass all my network parameters to the kernel through the LILO/Loadlin, therefore I remove almost everything from <FILENAME>rc.inet1</FILENAME> file. The only thing I leave there is the <COMMAND>ifconfig</COMMAND> and <COMMAND>route</COMMAND> of the localhost. If you use rarp or bootp, you will have to build it accordingly.</PARA>
<PARA>Secondly, you should edit your <FILENAME>rc.S</FILENAME>. First, remove all the parts that are responsible for the fsck check as fsck will occur when the server boots up. Then, you should find the line that mounts your fstab. This should look something like: </PARA>
<PARA><COMMAND MOREINFO="NONE">mount -avt nonfs</COMMAND></PARA>
<PARA>The <EMPHASIS>-t nonfs</EMPHASIS> is there since normal clients first run <FILENAME>rc.S</FILENAME> and only later on use <FILENAME>rc.inet1</FILENAME> to configure the Ethernet. As this will cause no NFS partitions to be mounted this line should be deleted. Therefore, change it to <EMPHASIS>mount -av</EMPHASIS>. If you need to run rarp/bootp to configure your network, do it in <FILENAME MOREINFO="NONE">rc.S</FILENAME> (or call the appropriate script from <FILENAME>rc.S</FILENAME>), before the mount, and make sure your physical <FILENAME>bin</FILENAME> and <FILENAME>sbin</FILENAME> directories have the necessary files available.</PARA>
<PARA>After the <COMMAND MOREINFO="NONE">mount -av</COMMAND> is performed, you will have a working file system. Build a general fstab, so that you can later copy it to each client. Your fstab should look something like this: </PARA>
<PARA><TABLE ORIENT="LAND" FRAME="NONE"><TITLE>fstab</TITLE>
<TGROUP COLS="6"><TBODY><ROW><ENTRY>server:/clients/hostname</ENTRY>
<ENTRY>/</ENTRY>
<ENTRY>nfs</ENTRY>
<ENTRY>default</ENTRY>
<ENTRY>1</ENTRY>
<ENTRY>1</ENTRY></ROW>
<ROW><ENTRY>server:/bin</ENTRY>
<ENTRY>/bin</ENTRY>
<ENTRY>nfs</ENTRY>
<ENTRY>default</ENTRY>
<ENTRY>1</ENTRY>
<ENTRY>1</ENTRY></ROW>
<ROW><ENTRY>server:/usr</ENTRY>
<ENTRY>/usr</ENTRY>
<ENTRY>nfs</ENTRY>
<ENTRY>default</ENTRY>
<ENTRY>1</ENTRY>
<ENTRY>1</ENTRY></ROW>
<ROW><ENTRY>server:/sbin</ENTRY>
<ENTRY>/sbin</ENTRY>
<ENTRY>nfs</ENTRY>
<ENTRY>default</ENTRY>
<ENTRY>1</ENTRY>
<ENTRY>1</ENTRY></ROW>
<ROW><ENTRY>erver:/home</ENTRY>
<ENTRY>/home</ENTRY>
<ENTRY>nfs</ENTRY>
<ENTRY>default</ENTRY>
<ENTRY>1</ENTRY>
<ENTRY>1</ENTRY></ROW>
<ROW><ENTRY>server:/lib</ENTRY>
<ENTRY>/lib</ENTRY>
<ENTRY>nfs</ENTRY>
<ENTRY>default</ENTRY>
<ENTRY>1</ENTRY>
<ENTRY>1</ENTRY></ROW>
<ROW><ENTRY>server:/clients/etc</ENTRY>
<ENTRY>/server/etc</ENTRY>
<ENTRY>nfs</ENTRY>
<ENTRY>default</ENTRY>
<ENTRY>1</ENTRY>
<ENTRY>1</ENTRY></ROW>
<ROW><ENTRY>server:/clients/var</ENTRY>
<ENTRY>/server/var</ENTRY>
<ENTRY>nfs</ENTRY>
<ENTRY>default</ENTRY>
<ENTRY>1</ENTRY>
<ENTRY>1</ENTRY></ROW>
<ROW><ENTRY>none</ENTRY>
<ENTRY>/proc</ENTRY>
<ENTRY>proc</ENTRY>
<ENTRY>default</ENTRY>
<ENTRY>1</ENTRY>
<ENTRY>1</ENTRY></ROW></TBODY></TGROUP></TABLE></PARA>
<PARA>Please notice, that the keyword <EMPHASIS>default</EMPHASIS> might not work on all versions of mount. You might change it to <OPTION>rw</OPTION> or <OPTION>ro</OPTION> or remove all of the <OPTION>default 1 1</OPTION> part.</PARA>
<PARA>Also, make sure your server's <FILENAME MOREINFO="NONE">/etc/exports</FILENAME> looks like this: </PARA>
<PARA><TABLE ORIENT="LAND" FRAME="NONE"><TITLE>/etc/exports</TITLE>
<TGROUP COLS="2"><TBODY><ROW><ENTRY>/clients/hostname</ENTRY>
<ENTRY>hostname.domainname(rw,no_root_squash)</ENTRY></ROW>
<ROW><ENTRY>/clients/etc</ENTRY>
<ENTRY>hostname.domainname(ro,no_root_squash)</ENTRY></ROW>
<ROW><ENTRY>/clients/var</ENTRY>
<ENTRY>hostname.domainname(ro,no_root_squash)</ENTRY></ROW>
<ROW><ENTRY>/usr</ENTRY>
<ENTRY>hostname.domainname(ro,no_root_squash)</ENTRY></ROW>
<ROW><ENTRY>/sbin</ENTRY>
<ENTRY>hostname.domainname(ro,no_root_squash)</ENTRY></ROW>
<ROW><ENTRY>/bin</ENTRY>
<ENTRY>hostname.domainname(ro,no_root_squash)</ENTRY></ROW>
<ROW><ENTRY>/lib</ENTRY>
<ENTRY>hostname.domainname(ro,no_root_squash)</ENTRY></ROW>
<ROW><ENTRY>/home</ENTRY>
<ENTRY>hostname.domainname(rw,no_root_squash)</ENTRY></ROW></TBODY></TGROUP></TABLE></PARA>
<PARA>Other than the first line, which should be separate for each host, the rest of the lines can be replaced with a hostmask to fit all your hosts (like pc*.domain - keep in mind though, that * will substitue only strings without a dot in them). I suggest that you make most of the directories read only, but this is up to you. The <OPTION>no_root_squash</OPTION> will make sure root users on the clients have actual root permissions on the nfsd as well. Check out man exports(5). If you want users to be able to run <COMMAND>passwd</COMMAND> from the clients also, make sure the <FILENAME MOREINFO="NONE">/etc</FILENAME> has <OPTION>rw</OPTION> and not <OPTION>ro</OPTION> permissions. However, this is not advisable. </PARA>
<PARA>Please note another thing concerning the <FILENAME MOREINFO="NONE">rc.S</FILENAME> file. In Slackware, by default, it creates a new <FILENAME MOREINFO="NONE">/etc/issue</FILENAME> and <FILENAME MOREINFO="NONE">/etc/motd</FILENAME> every time it runs. This function MUST be disabled if these files are mounted ro from the server, and I would recommend that they should be disabled in any case.</PARA>
<PARA>Lastly, if you want to have the same userbase on the server as on the clients, you should choose between 1), using NIS (Yellow Pages - check the yp-howto), and then each client will have a separate <FILENAME MOREINFO="NONE">/etc/passwd</FILENAME> and <FILENAME MOREINFO="NONE">/etc/group</FILENAME> as it receives it from the NIS server. 2) In most cases, a simple symbolic link will suffice. Therefore, you will need to either hardlink <FILENAME MOREINFO="NONE">/clients/etc/passwd</FILENAME> to <FILENAME MOREINFO="NONE">/etc/passwd</FILENAME>, or if you prefer a symlink, link <FILENAME MOREINFO="NONE">/etc/passwd</FILENAME> to <FILENAME MOREINFO="NONE">/clients/etc/passwd</FILENAME> (and not the other way around, since the clients do not mount the server's <FILENAME>etc</FILENAME> directory). Do the same for <FILENAME MOREINFO="NONE">/etc/group</FILENAME>. </PARA></SECT3>
<SECT3><TITLE>Creating a client's <FILENAME>etc</FILENAME> directory</TITLE>
<PARA>Generally, most of the files in the client's etc should be symlinked to the <FILENAME MOREINFO="NONE">/server/etc</FILENAME> directory. However, some files are different for each machine, and some just have to be there when the kernel loads. The minimum you need from the <FILENAME>etc</FILENAME> dir is as follows: </PARA>
<PARA><SIMPLELIST TYPE="VERT"><MEMBER><FILENAME MOREINFO="NONE">resolv.conf</FILENAME></MEMBER>
<MEMBER><FILENAME MOREINFO="NONE">hosts</FILENAME></MEMBER>
<MEMBER><FILENAME MOREINFO="NONE">inittab</FILENAME></MEMBER>
<MEMBER><FILENAME MOREINFO="NONE">rc.d/rc.S</FILENAME></MEMBER>
<MEMBER><FILENAME MOREINFO="NONE">fstab</FILENAME></MEMBER></SIMPLELIST></PARA>
<PARA>Since these 5 files can be identical on all clients, you can simply hardlink them or copy them again. However, with the <FILENAME MOREINFO="NONE">rc.S</FILENAME> and <FILENAME MOREINFO="NONE">fstab</FILENAME> file it is advised to keep a separate copy for each client. You will also need a separate <FILENAME MOREINFO="NONE">etc/HOSTNAME</FILENAME> for each client. I personally recommend having all of the <FILENAME MOREINFO="NONE">rc.d</FILENAME> files separate for each client, as configuration and hardware might vary from one to another.</PARA>
<PARA>For each client, add to the <FILENAME>fstab</FILENAME> the proper swap line:</PARA>
<PARA><TABLE ORIENT="LAND" FRAME="NONE"><TITLE>fstab</TITLE>
<TGROUP COLS="6"><TBODY><ROW><ENTRY>/dev/swap_partition</ENTRY>
<ENTRY>swap</ENTRY>
<ENTRY>swap</ENTRY>
<ENTRY>default</ENTRY>
<ENTRY>1</ENTRY>
<ENTRY>1</ENTRY></ROW></TBODY></TGROUP></TABLE></PARA>
<PARA>The rest of the <FILENAME MOREINFO="NONE">/etc</FILENAME> files of the client, you can either hardlink to the <FILENAME MOREINFO="NONE">/clients/etc/*</FILENAME> files, or symlink them to the <FILENAME MOREINFO="NONE">/server/etc</FILENAME> (which is the mount point of <FILENAME MOREINFO="NONE">/clients/etc/</FILENAME>).</PARA>
<PARA>Make sure your machine can resolve properly, either through a named or through <FILENAME>etc/hosts</FILENAME>. It is not a bad idea to keep the server's IP in the <FILENAME>etc/hosts</FILENAME>, instead of counting on resolving. If you will count only on named resolving, a problem in the named will prevent your clients from booting up. </PARA></SECT3></SECT2>
<SECT2><TITLE>Booting Up</TITLE>
<PARA>Now, all you have to do is to boot up your machine, cross your fingers and hope everything works as it should :-).</PARA></SECT2></SECT1>
<SECT1 ID="moreclients"><TITLE>Creating more clients</TITLE>
<PARA>If you have followed my instructions so far this should be simple - cd to <FILENAME MOREINFO="NONE">/clients/</FILENAME> and type:</PARA>
<PROGRAMLISTING FORMAT="LINESPECIFIC">
bash# cp -a hostname1 hostname2</PROGRAMLISTING>
<PARA>and then make sure you check these points:</PARA>
<PARA><ITEMIZEDLIST><LISTITEM><PARA><FILENAME MOREINFO="NONE">rc.d/*</FILENAME> files matches the hardware and wanted software configuration </PARA></LISTITEM>
<LISTITEM><PARA><FILENAME MOREINFO="NONE">etc/HOSTNAME</FILENAME> is correct</PARA></LISTITEM>
<LISTITEM><PARA>fstab's swap line is correct</PARA></LISTITEM>
<LISTITEM><PARA>the symbolic links of <FILENAME MOREINFO="NONE">dev/mouse</FILENAME>, <FILENAME MOREINFO="NONE">dev/modem</FILENAME> and <FILENAME MOREINFO="NONE">dev/cdrom</FILENAME>are right.</PARA></LISTITEM></ITEMIZEDLIST></PARA>
<PARA>Good Luck.... </PARA></SECT1></ARTICLE>

