<!--DOCTYPE section PUBLIC "-//OASIS//DTD DocBook V4.1//EN"-->
<!-- $Id$ -->

<section id="gettext">
  <title id="gettext.title">Prekladanie aplikácií do slovenèiny</title>

  <para>V podaktorých operaèných systémoch sa to robí tak, ¾e výrobca si v ka¾dej krajine objedná
    firmu, ktorá prelo¾í hlá¹ky priamo v zdrojovom kóde a nanovo ho skompiluje. Výhodou je, ¾e
    preklad je draho zaplatený a teda poväè¹inou profesionálny, konzultovaný s linguistami a inými
    istami. Hor¹ie je, ¾e obèas sa niekto so zdrojákmi hrá viac ako je nutné (alebo nechtiac prelo¾í
    kúsok z nich) a potom národné verzie majú iné vlastnosti (a padavos») ako verzia pôvodná.
    Navy¹e, ak sa pritrafí nejaká chybièka prekladu, oprava nehrozí do najbli¾¹ej major
    verzie.</para>

  <para>V <acronym>GNU</acronym> operaèných systémoch sa to robí tak, ¾e výrobca napí¹e aplikáciu,
    prièom na zaèiatok pridá desa» riadkov kódu a ka¾dú hlá¹ku uzavrie do makra. Potom to
    skompiluje, jedným príkazom vytvorí súbor so v¹etkými hlá¹kami v programe a celé to vypustí.
    Ktokoµvek -- od Eskimáka s laptopom v iglu, cez Slováka s 386 v garzónke, a¾ po arabského emira
    s dvojprocesorovou Alphou v desa»poschodovom paláci -- potom jednoducho prelo¾í re»azce v
    spomínanom súbore, spustí jeden príkaz a má danú aplikáciu pripravenú pre svoj jazyk. Nastaví
    premennú, spustí pôvodnú binárku -- tú istú, ktorá predtým be¾ala po anglicky -- a u¾ je
    doma!</para>

  <para>Neviem, ktorý postup sa vám páèi viac, ale ak nechcete na¹tva» nejakého Albánca alebo
    nebodaj Kolumbijèana, pou¾ívajte v Linuxe ten druhý.</para>

  <section id="gettext.gettext">
    <title id="gettext.gettext.title">GNU gettext</title>

    <para>Kni¾nica <application><acronym>GNU</acronym> gettext</application> je tým zázraèným
      nástrojom, ktorý tak uµahèuje úpravu aplikácií pre krajiny, kde sa nehovorí po anglicky. Na
      niektorých systémoch ju nájdete ako samostatnú kni¾nicu (libintl.a), na iných je priamo
      súèas»ou ¹tandardnej kni¾nice jazyka <acronym>C</acronym>. Obsahuje zo desa» funkcií, z
      ktorých sa pou¾ívajú asi tak dve. To je v¹ak dôle¾ité len pre programátorov, ktorý pri návrhu
      a tvorbe softvéru nesmú zabudnú» pou¾íva» tieto funkcie.</para>

    <para>Pre prekladateµa sú dôle¾itej¹ie programy, ktoré sa nachádzajú v balíku gettext. Je to
      niekoµko nástrojov, pomocou ktorých mo¾no prevádza» <acronym>PO</acronym> súbory na súbory
	<acronym>MO</acronym> a naopak, spája» <acronym>PO</acronym> súbory, atï. Keï je aplikácia
	napísaná s pou¾itím funkcií kni¾nice gettext a pou¾íva ich správne, potom je vïaka týmto
	nástrojom mo¾ný preklad do µubovoµného jazyka.</para>

  </section> <!-- gettext.gettext -->

  <section id="gettext.writing">
    <title>Písanie aplikácie s podporou pre gettext</title>

    <para>V ïal¹ích kapitolách budeme pou¾íva» nasledovný príklad zdrojového kódu v jazyku
      <acronym>C</acronym>.</para>

    <programlisting>
#include &lt;stdlib.h>
#include &lt;string.h>
#include &lt;stdio.h>
#include &lt;time.h>

int main(int argc, char **argv)
{
        int i;
        char *suffix;
        time_t curtime;

        if (argc > 2)
                suffix = "s";
        else
                suffix = "";
        printf("Got %d argument%s.\n", argc - 1, suffix);

        if (argc > 1) {
                puts("List of arguments:");
                for (i = 1; i < argc; i++) {
                        if (i == 1)
                                suffix = "st";
                        else if (i == 2)
                                suffix = "nd";
                        else if (i == 3)
                                suffix = "rd";
                        else
                                suffix = "th";
                        printf("\t%d%s %s\n", i, suffix, argv[i]);
                }
        }

        curtime = time(NULL);
        printf("Exiting at: %s", ctime(&amp;curtime));

        return EXIT_SUCCESS;
}
    </programlisting>

    <section id="gettext.writing.setlocale">
      <title>Funkcia <function>setlocale()</function></title>

      <para>Aby funkcie z kni¾nice <application>gettext</application>, aký preklad majú hµada», teda
	akú hodnotu má premenná <envar>LC_MESSAGES</envar>, musíme na zaèiatku programu zavola»
	funkciu <function>setlocale()</function>.</para>

      <para>Syntax funkcie <function>setlocale()</function> je nasledovný:
	<funcsynopsis>
	  <funcprototype>
	    <funcdef>char *<function>setlocale</function></funcdef>
	    <paramdef>int <parameter>category</parameter></paramdef>
	    <paramdef>const char *<parameter>locale</parameter></paramdef>
	  </funcprototype>
	</funcsynopsis></para>

      <para>V¹etko, èo o tejto funkcii potrebujete vedie», nájdete v jej manuálovej stránke. Pre
	potreby tohto dokumentu si povieme len toµko, ¾e prakticky ka¾dý (rozumný) program obsahuje
	niekde na zaèiatku riadok.
	<programlisting>
setlocale(LC_ALL, NULL);
	</programlisting></para>

      <para>Takto postavená funkcia nastaví miestne nastavenia programu podµa premenných
	<envar>LC_*</envar>. Funkcie kni¾nice <application>gettext</application> sa potom tejto
	istej funkcie opýtajú:
	<programlisting>
ext = setlocale(LC_MESSAGES, NULL);
	</programlisting>
	a dostanú odpoveï typu <computeroutput>sk_SK.ISO-8859-2</computeroutput>. V tom prípade sa
	budú hµada» súbory s prelo¾enými hlá¹kami v adresároch
	<simplelist>
	  <member>
	    <filename class="directory">/usr/share/locale/sk_SK.ISO-8859-2/LC_MESSAGES/</filename>
	  </member>
	  <member>
	    <filename class="directory">/usr/share/locale/sk_SK/LC_MESSAGES/</filename>
	  </member>
	  <member>
	    <filename class="directory">/usr/share/locale/sk/LC_MESSAGES/</filename>
	  </member>
	</simplelist>
	prièom èas» <filename class="directory">/usr/share/locale/</filename> sa dá zmeni» (o tom
	potom).</para>

      <para>V ktorom z týchto adresárov (v tomto poradí) nájde súbor so svojimi hlá¹kami, z toho ich
	bude »aha».</para>
    </section> <!-- gettext.writing.setlocale -->
    
    <section id="gettext.writing.functions">
      <title>Funkcia <function>textdomain()</function></title>

      <para>Ale adresár staèi» nebude. Potrebujeme urèi» aj meno súboru, v ktorom sa hlá¹ky
	nachádzajú. Na to slú¾i funkcia <function>textdomain()</function>. Jej syntax je:
	<funcsynopsis>
	  <funcprototype>
	    <funcdef>char *<function>textdomain</function></funcdef>
	    <paramdef>const char *<parameter>domainname</parameter></paramdef>
	  </funcprototype>
	</funcsynopsis></para>

      <para>Argument <parameter>domainname</parameter> udáva meno takzvanej
	<emphasis>domény</emphasis> programu. Kedykoµvek nastane po¾iadavka na prelo¾ený re»azec,
	tento sa bude hµada» v súbore <filename>domainname.mo</filename> v niektorom zo spomínaných
	adresárov.</para>

      <para>Doplòme si teda do ná¹ho programu v¹etko, èo je potrebné na to, aby vedel, v ktorom
	adresári a konkrétne v ktorom súbore sa majú hµada» prelo¾ené hlá¹ky.</para>
      
      <informalexample>
	<programlisting>
#include &lt;stdlib.h>
#include &lt;string.h>
#include &lt;stdio.h>
#include &lt;time.h>

#include &lt;libintl.h>	// hlavièkový súbor kni¾nice gettext
#include &lt;locale.h>	// setlocale()

int main(int argc, char **argv)
{
	int i;
	char *suffix;
	time_t curtime;

	setlocale(LC_ALL, NULL);  // nastaví informácie o miestnych nastaveniach
	textdomain("example");	// nastaví "doménu" programu

	if (argc > 2)
		suffix = "s";
	else

	...

	return EXIT_SUCCESS;
}
	</programlisting>
      </informalexample>
    </section> <!-- gettext.writing.domainname -->

    <section>
      <title>Funkcia <function>gettext()</function></title>
    
      <para>Aj keï u¾ vieme, v ktorom súbore nájdeme prelo¾ené hlásenia programu, samé od seba sa
	za behu nedoplnia. Navy¹e, mali by sme urèi», ktoré presne hlá¹ky chceme ma» prelo¾ené.
	Napríklad, debugovacie informácie urèené len pre programátorov sa zväè¹a neprekladajú.
	Formátovacie re»azce pre printf, ktoré neobsahujú text na prelo¾enie, tie¾ nie je nutné
	ukazova» prekladateµovi.</para>

      <para>Ktoré re»azce majú by» dostupné prekladateµom na preklad, o tom rozhoduje programátor.
	Samozrejme, niekedy na nieèo pozabudne a èasto sa stáva, ¾e prekladatelia sa musia sta» na
	chvíµu progamátormi, aby bol daný program "prelo¾iteµný" do ich jazyka.</para>

    </section> <!-- gettext.writing.gettext -->
  </section> <!-- gettext.writing -->
      
  <section>
    <title>Formát PO súboru</title>

    <para></para>
  </section>

  <section>
    <title>Komentáre</title>

    <para></para>
  </section>
  
  <section>
    <title>PO Template</title>

    <para></para>
  </section>
  
  <section>
    <title>Vytváranie POT súboru</title>

    <para></para>
  </section>
</section>

